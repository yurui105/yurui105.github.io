<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>余睿的博客</title>
  <icon>http://www.yurui.tech/icon.png</icon>
  <subtitle>浮生若梦，别多会少，不如莫遇</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yurui.tech/"/>
  <updated>2020-07-11T06:01:47.000Z</updated>
  <id>http://www.yurui.tech/</id>
  
  <author>
    <name>余睿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>类型转换构造函数以及析构函数</title>
    <link href="http://www.yurui.tech/2020/07/11/C++/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://www.yurui.tech/2020/07/11/C++/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
    <published>2020-07-11T06:01:47.000Z</published>
    <updated>2020-07-11T06:01:47.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类型转换构造函数&quot;&gt;&lt;a href=&quot;#类型转换构造函数&quot; class=&quot;headerlink&quot; title=&quot;类型转换构造函数&quot;&gt;&lt;/a&gt;类型转换构造函数&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义类型转换构造函数的目的是实现类型的自动转化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只有一个参数，而且不是复制构造函数的构造函数，一般就可以看作是转换构造函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="c++" scheme="http://www.yurui.tech/tags/c/"/>
    
      <category term="构造函数" scheme="http://www.yurui.tech/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="转换构造函数" scheme="http://www.yurui.tech/tags/%E8%BD%AC%E6%8D%A2%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="类型转换构造函数" scheme="http://www.yurui.tech/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="析构函数" scheme="http://www.yurui.tech/tags/%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    
      <category term="~运算符" scheme="http://www.yurui.tech/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>c++复制构造函数</title>
    <link href="http://www.yurui.tech/2020/07/10/C++/c++%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://www.yurui.tech/2020/07/10/C++/c++%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
    <published>2020-07-10T07:32:38.000Z</published>
    <updated>2020-07-10T07:32:38.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;复制构造函数&lt;/strong&gt;(&lt;strong&gt;Copy constructor&lt;/strong&gt;)是c++中的一个特殊构造函数，也称&lt;strong&gt;拷贝构造函数&lt;/strong&gt;，它只有一个参数，参数类型为同类对象的引用。&lt;/p&gt;
&lt;p&gt;如果没有定义复制构造函数，那么编译器将生成默认的复制构造函数。默认的复制构造函数完成复制的功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="c++" scheme="http://www.yurui.tech/tags/c/"/>
    
      <category term="构造函数" scheme="http://www.yurui.tech/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="复制构造函数" scheme="http://www.yurui.tech/tags/%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="拷贝构造函数" scheme="http://www.yurui.tech/tags/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++构造函数</title>
    <link href="http://www.yurui.tech/2020/07/09/C++/C-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://www.yurui.tech/2020/07/09/C++/C-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
    <published>2020-07-09T13:11:16.000Z</published>
    <updated>2020-07-09T13:11:16.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h1&gt;&lt;h1 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;p&gt;在c++的类中，构造函数是一种特殊的成员函数，在每次创建创建一个类的时候会默认调用构造函数进行初始化工作。&lt;/p&gt;
&lt;p&gt;构造函数用来完成一些必要的初始化工作，有了构造函数之后，就无需再单独写初始化函数，并且也不必担心忘记调用初始化函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="c++" scheme="http://www.yurui.tech/tags/c/"/>
    
      <category term="构造函数" scheme="http://www.yurui.tech/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++类和对象基础知识</title>
    <link href="http://www.yurui.tech/2020/07/08/C++/C-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.yurui.tech/2020/07/08/C++/C-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-07-08T13:30:18.000Z</published>
    <updated>2020-07-08T13:30:18.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;类和对象&quot;&gt;&lt;a href=&quot;#类和对象&quot; class=&quot;headerlink&quot; title=&quot;类和对象&quot;&gt;&lt;/a&gt;类和对象&lt;/h1&gt;&lt;p&gt;在c语言中，程序是由若干的函数以及变量组成的，它们之间并没有很严格的关系，这就导致了当程序规模逐渐变大之后，就不易于程序的扩充以及维护。另外，当我们想要复用之前程序中的一些代码片段时，函数中的变量使得我们很难将其从程序中抽离出来。总之，结构化程序设计使得我们的程序难以扩充、难以维护、难以重用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="c++对象" scheme="http://www.yurui.tech/tags/c-%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="c++类" scheme="http://www.yurui.tech/tags/c-%E7%B1%BB/"/>
    
      <category term="面向对象" scheme="http://www.yurui.tech/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="构造函数" scheme="http://www.yurui.tech/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>数列极限的定义及应用</title>
    <link href="http://www.yurui.tech/2020/06/04/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>http://www.yurui.tech/2020/06/04/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%BA%94%E7%94%A8/</id>
    <published>2020-06-04T08:31:36.000Z</published>
    <updated>2020-06-04T08:31:36.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数列极限的定义&quot;&gt;&lt;a href=&quot;#数列极限的定义&quot; class=&quot;headerlink&quot; title=&quot;数列极限的定义&quot;&gt;&lt;/a&gt;数列极限的定义&lt;/h1&gt;&lt;h2 id=&quot;概念引入&quot;&gt;&lt;a href=&quot;#概念引入&quot; class=&quot;headerlink&quot; title=&quot;概念引入&quot;&gt;&lt;/a&gt;概念引入&lt;/h2&gt;&lt;p&gt;我们先来看一个数列$x_n=\frac{1}{n}$&lt;/p&gt;
&lt;p&gt;当$n=1$时，$x_1=\frac{1}{1}=1$&lt;/p&gt;
&lt;p&gt;当$n=2$时，$x_2=\frac{1}{2}$&lt;/p&gt;
    
    </summary>
    
    
      <category term="数学分析" scheme="http://www.yurui.tech/categories/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数列极限" scheme="http://www.yurui.tech/tags/%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90/"/>
    
      <category term="数列极限定义" scheme="http://www.yurui.tech/tags/%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90%E5%AE%9A%E4%B9%89/"/>
    
      <category term="数列极限应用" scheme="http://www.yurui.tech/tags/%E6%95%B0%E5%88%97%E6%9E%81%E9%99%90%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>1、向量及其运算</title>
    <link href="http://www.yurui.tech/2020/06/01/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/1%E3%80%81%E5%90%91%E9%87%8F%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/"/>
    <id>http://www.yurui.tech/2020/06/01/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/1%E3%80%81%E5%90%91%E9%87%8F%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/</id>
    <published>2020-06-01T14:15:24.000Z</published>
    <updated>2020-06-01T14:15:24.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;线性代数的中心问题是求解线性方程组。&lt;/p&gt;
&lt;p&gt;假设给定一个线性方程组：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
x_1+2x_2=4\\
2x_1-3x_2=-2&lt;/script&gt;
    
    </summary>
    
    
      <category term="线性代数" scheme="http://www.yurui.tech/categories/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>c++函数的缺省参数</title>
    <link href="http://www.yurui.tech/2020/06/01/C++/c-%E5%87%BD%E6%95%B0%E7%9A%84%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0/"/>
    <id>http://www.yurui.tech/2020/06/01/C++/c-%E5%87%BD%E6%95%B0%E7%9A%84%E7%BC%BA%E7%9C%81%E5%8F%82%E6%95%B0/</id>
    <published>2020-06-01T03:31:00.000Z</published>
    <updated>2020-06-01T03:31:00.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;c++中，定义函数的时候可以让&lt;strong&gt;最右边的连续若干个&lt;/strong&gt;参数有缺省值，在调用函数的时候，如果不写相应位置的参数，则调用的参数就为缺省值。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;a=&quot;&lt;/span&gt; &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\tb=&quot;&lt;/span&gt; &amp;lt;&amp;lt; b &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;\tc=&quot;&lt;/span&gt; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="c++" scheme="http://www.yurui.tech/tags/c/"/>
    
      <category term="参数缺省" scheme="http://www.yurui.tech/tags/%E5%8F%82%E6%95%B0%E7%BC%BA%E7%9C%81/"/>
    
      <category term="函数参数缺省" scheme="http://www.yurui.tech/tags/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%BC%BA%E7%9C%81/"/>
    
  </entry>
  
  <entry>
    <title>c++函数重载</title>
    <link href="http://www.yurui.tech/2020/06/01/C++/c-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
    <id>http://www.yurui.tech/2020/06/01/C++/c-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</id>
    <published>2020-06-01T03:01:27.000Z</published>
    <updated>2020-06-01T03:01:27.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;p&gt;假设如下函数来比较两个&lt;code&gt;int&lt;/code&gt;型数据的大小&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a &amp;gt; b ? a : b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="c++" scheme="http://www.yurui.tech/tags/c/"/>
    
      <category term="函数重载" scheme="http://www.yurui.tech/tags/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>c++内联函数inline</title>
    <link href="http://www.yurui.tech/2020/06/01/C++/c-%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0inline/"/>
    <id>http://www.yurui.tech/2020/06/01/C++/c-%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0inline/</id>
    <published>2020-06-01T02:21:30.000Z</published>
    <updated>2020-06-01T02:21:30.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;inline概念&quot;&gt;&lt;a href=&quot;#inline概念&quot; class=&quot;headerlink&quot; title=&quot;inline概念&quot;&gt;&lt;/a&gt;&lt;code&gt;inline&lt;/code&gt;概念&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;c++&lt;/code&gt;中，函数调用是会产生额外的时间开销的，如果函数本身代码很短，执行很快，并且该函数被反复调用。相比之下调用函数所产生的开销就会很大，甚至超过执行代码所产生的开销。&lt;/p&gt;
&lt;p&gt;为了减少函数调用的开销，&lt;code&gt;c++&lt;/code&gt;引入了&lt;code&gt;内联函数&lt;/code&gt;的机制。编译器在处理内联函数的调用语句时，直接将整个内联函数代码插入到调用语句处，从而减少函数调用产生的开销。&lt;br&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="c++" scheme="http://www.yurui.tech/tags/c/"/>
    
      <category term="inline函数" scheme="http://www.yurui.tech/tags/inline%E5%87%BD%E6%95%B0/"/>
    
      <category term="内联函数" scheme="http://www.yurui.tech/tags/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++动态内存分类(new/delete)</title>
    <link href="http://www.yurui.tech/2020/05/31/C++/C-%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E7%B1%BB-new-delete/"/>
    <id>http://www.yurui.tech/2020/05/31/C++/C-%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E7%B1%BB-new-delete/</id>
    <published>2020-05-31T08:11:58.000Z</published>
    <updated>2020-05-31T08:11:58.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用new运算符分配一个变量&quot;&gt;&lt;a href=&quot;#使用new运算符分配一个变量&quot; class=&quot;headerlink&quot; title=&quot;使用new运算符分配一个变量&quot;&gt;&lt;/a&gt;使用&lt;code&gt;new&lt;/code&gt;运算符分配一个变量&lt;/h1&gt;&lt;p&gt;格式：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;P = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; T;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;T&lt;/code&gt;是任意类型名，&lt;code&gt;P&lt;/code&gt;是类型为&lt;code&gt;T*&lt;/code&gt;的指针。&lt;/p&gt;
&lt;p&gt;使用该表达式动态分配出一片大小为&lt;code&gt;sizeof(T)&lt;/code&gt;字节的内存空间。并且将该内存空间的其实地址赋值给&lt;code&gt;P&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="c++" scheme="http://www.yurui.tech/tags/c/"/>
    
      <category term="内存分配" scheme="http://www.yurui.tech/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    
      <category term="new关键字" scheme="http://www.yurui.tech/tags/new%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
      <category term="delete关键字" scheme="http://www.yurui.tech/tags/delete%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>C++ const关键字使用</title>
    <link href="http://www.yurui.tech/2020/05/31/C++/C-const%E5%85%B3%E9%94%AE%E5%AD%97%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.yurui.tech/2020/05/31/C++/C-const%E5%85%B3%E9%94%AE%E5%AD%97%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-31T07:44:03.000Z</published>
    <updated>2020-05-31T07:44:03.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;const定义常量&quot;&gt;&lt;a href=&quot;#const定义常量&quot; class=&quot;headerlink&quot; title=&quot;const定义常量&quot;&gt;&lt;/a&gt;&lt;code&gt;const&lt;/code&gt;定义常量&lt;/h1&gt;&lt;p&gt;在c语言中，我们学习过可以使用&lt;code&gt;#define&lt;/code&gt;来定义常量。但是&lt;code&gt;#define&lt;/code&gt;的原理是简单的替换，因此对于&lt;code&gt;#define&lt;/code&gt;来说没有类型检查这回事。&lt;/p&gt;
&lt;p&gt;c++中提供了&lt;code&gt;const&lt;/code&gt;关键字，用&lt;code&gt;const&lt;/code&gt;关键字修饰的变量其值是不能修改的，因此可以使用&lt;code&gt;const&lt;/code&gt;关键字来替换&lt;code&gt;#define&lt;/code&gt;，这有益于编译器进行类型检查。&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="c++" scheme="http://www.yurui.tech/tags/c/"/>
    
      <category term="const" scheme="http://www.yurui.tech/tags/const/"/>
    
      <category term="const关键字" scheme="http://www.yurui.tech/tags/const%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
      <category term="常引用" scheme="http://www.yurui.tech/tags/%E5%B8%B8%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>C++引用</title>
    <link href="http://www.yurui.tech/2020/05/31/C++/C-%E5%BC%95%E7%94%A8/"/>
    <id>http://www.yurui.tech/2020/05/31/C++/C-%E5%BC%95%E7%94%A8/</id>
    <published>2020-05-31T06:34:24.000Z</published>
    <updated>2020-05-31T06:34:24.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引用的概念&quot;&gt;&lt;a href=&quot;#引用的概念&quot; class=&quot;headerlink&quot; title=&quot;引用的概念&quot;&gt;&lt;/a&gt;引用的概念&lt;/h1&gt;&lt;p&gt;引用是变量的一个别名，相当于已经存在的变量的另一个名字。引用名与被引用的变量名都指向同一个内存地址。&lt;/p&gt;
&lt;h1 id=&quot;引用的创建&quot;&gt;&lt;a href=&quot;#引用的创建&quot; class=&quot;headerlink&quot; title=&quot;引用的创建&quot;&gt;&lt;/a&gt;引用的创建&lt;/h1&gt;&lt;p&gt;引用创建的语法格式如下，其中&lt;code&gt;T&lt;/code&gt;为任意类型：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;T &amp;amp;引用名 = 变量名;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="C++" scheme="http://www.yurui.tech/tags/C/"/>
    
      <category term="c++引用" scheme="http://www.yurui.tech/tags/c-%E5%BC%95%E7%94%A8/"/>
    
      <category term="函数返回值引用" scheme="http://www.yurui.tech/tags/%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%BC%95%E7%94%A8/"/>
    
      <category term="变量引用" scheme="http://www.yurui.tech/tags/%E5%8F%98%E9%87%8F%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>C/C++位运算</title>
    <link href="http://www.yurui.tech/2020/02/26/C++/C-C-%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://www.yurui.tech/2020/02/26/C++/C-C-%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2020-02-26T02:44:19.000Z</published>
    <updated>2020-02-26T02:44:19.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;数据在计算机中是按二进制的形式存在的，通过普通的四则运算我们能对这些数据做一些简单的运算。但当我们想修改某个数据中的某一位，我们就需要用到位运算。&lt;/p&gt;
&lt;p&gt;例如：&lt;code&gt;666&lt;/code&gt;的二进制为&lt;code&gt;‭0001101000001010‬&lt;/code&gt;，如果我们需要知道或者修改最高位，此时我们就无法通过一般的方法来对其进行操作，就需要用到位运算符。&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="c语言位运算" scheme="http://www.yurui.tech/tags/c%E8%AF%AD%E8%A8%80%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="c++位运算" scheme="http://www.yurui.tech/tags/c-%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="按位运算" scheme="http://www.yurui.tech/tags/%E6%8C%89%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="按位与" scheme="http://www.yurui.tech/tags/%E6%8C%89%E4%BD%8D%E4%B8%8E/"/>
    
      <category term="按位或" scheme="http://www.yurui.tech/tags/%E6%8C%89%E4%BD%8D%E6%88%96/"/>
    
      <category term="按位异或" scheme="http://www.yurui.tech/tags/%E6%8C%89%E4%BD%8D%E5%BC%82%E6%88%96/"/>
    
      <category term="移位运算符" scheme="http://www.yurui.tech/tags/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>C/C++函数指针</title>
    <link href="http://www.yurui.tech/2020/02/25/C++/C-C-%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    <id>http://www.yurui.tech/2020/02/25/C++/C-C-%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/</id>
    <published>2020-02-25T06:32:17.000Z</published>
    <updated>2020-02-25T06:32:17.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;指针&lt;/strong&gt;是用来在程序中指向某一个变量的，实际上指针内存放的就是一个变量的相对内存地址（实际的物理地址还要加上一个偏移值）。&lt;/p&gt;
&lt;p&gt;在程序运行期间，每个函数都会占用一段连续的内存空间，而函数名就是该函数所占内存空间的起始地址（入口地址），我们可以将一个函数的起始地址赋值给一个指针，进而通过该指针来调用函数，这就是函数指针。&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://www.yurui.tech/categories/c/"/>
    
    
      <category term="函数指针" scheme="http://www.yurui.tech/tags/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    
      <category term="c语言函数指针" scheme="http://www.yurui.tech/tags/c%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    
      <category term="c++函数指针" scheme="http://www.yurui.tech/tags/c-%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>影音服务jellyfin安装与使用</title>
    <link href="http://www.yurui.tech/2020/01/01/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/9%E3%80%81%E5%BD%B1%E9%9F%B3%E6%9C%8D%E5%8A%A1jellyfin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.yurui.tech/2020/01/01/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/9%E3%80%81%E5%BD%B1%E9%9F%B3%E6%9C%8D%E5%8A%A1jellyfin%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2020-01-01T04:49:49.000Z</published>
    <updated>2020-01-01T04:49:49.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;关于的jellyfin影音服务，已经有很多人对其做过介绍了，但在这里我任然要为其写一篇相关安装与使用的文章，因为在别的贴子里，很多人容易忽视掉设置硬件加速的一些必要步骤。&lt;/p&gt;
&lt;p&gt;本篇文章将会从本机安装以及docker安装两种安装方式来向大家介绍jellyfin的安装以及基本使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="家庭NAS、HTPC服务器" scheme="http://www.yurui.tech/categories/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="NAS系统" scheme="http://www.yurui.tech/tags/NAS%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="家庭影音" scheme="http://www.yurui.tech/tags/%E5%AE%B6%E5%BA%AD%E5%BD%B1%E9%9F%B3/"/>
    
      <category term="HTPC服务器" scheme="http://www.yurui.tech/tags/HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="jellyfin" scheme="http://www.yurui.tech/tags/jellyfin/"/>
    
      <category term="影音服务" scheme="http://www.yurui.tech/tags/%E5%BD%B1%E9%9F%B3%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Docker的安装与使用</title>
    <link href="http://www.yurui.tech/2019/12/30/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/8%E3%80%81Ubuntu%E4%B8%8BDocker%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.yurui.tech/2019/12/30/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/8%E3%80%81Ubuntu%E4%B8%8BDocker%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2019-12-30T04:49:49.000Z</published>
    <updated>2019-12-30T04:49:49.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;经过前面那么多期的铺垫，今天我们终于可以来安装使用我么的docker了。这是一个非常好用的工具，我们的NAS服务百分之九十都会部署在docker上运行。&lt;/p&gt;
&lt;p&gt;有了docker以后，你不再需要小心翼翼地担心把系统配置搞乱无法恢复，在这里你可以通过几个简单地命令就可以将相关服务重新部署回来。&lt;/p&gt;
&lt;p&gt;就这样，请拥有，并享受&lt;br&gt;
    
    </summary>
    
    
      <category term="家庭NAS、HTPC服务器" scheme="http://www.yurui.tech/categories/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="NAS系统" scheme="http://www.yurui.tech/tags/NAS%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="家庭影音" scheme="http://www.yurui.tech/tags/%E5%AE%B6%E5%BA%AD%E5%BD%B1%E9%9F%B3/"/>
    
      <category term="HTPC服务器" scheme="http://www.yurui.tech/tags/HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="docker" scheme="http://www.yurui.tech/tags/docker/"/>
    
      <category term="ubuntu安装docker" scheme="http://www.yurui.tech/tags/ubuntu%E5%AE%89%E8%A3%85docker/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu挂载硬盘</title>
    <link href="http://www.yurui.tech/2019/12/29/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/7%E3%80%81Ubuntu%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/"/>
    <id>http://www.yurui.tech/2019/12/29/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/7%E3%80%81Ubuntu%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/</id>
    <published>2019-12-29T04:49:49.000Z</published>
    <updated>2019-12-29T04:49:49.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在开始下篇文章之前我觉得有必要讲解一下在linux中的硬盘挂载。这和Windows不同，Windows会自动扫描本地硬盘并为你自动挂载，但是linux不会值么做，它需要你自己去挂载硬盘到系统中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="家庭NAS、HTPC服务器" scheme="http://www.yurui.tech/categories/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="NAS系统" scheme="http://www.yurui.tech/tags/NAS%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="家庭影音" scheme="http://www.yurui.tech/tags/%E5%AE%B6%E5%BA%AD%E5%BD%B1%E9%9F%B3/"/>
    
      <category term="HTPC服务器" scheme="http://www.yurui.tech/tags/HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="linux硬盘挂载" scheme="http://www.yurui.tech/tags/linux%E7%A1%AC%E7%9B%98%E6%8C%82%E8%BD%BD/"/>
    
      <category term="ubuntu挂载硬盘" scheme="http://www.yurui.tech/tags/ubuntu%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>WEB-UI管理面板Cockpit(轻量简单)安装与使用</title>
    <link href="http://www.yurui.tech/2019/12/28/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/6%E3%80%81WEB-UI%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BFCockpit(%E8%BD%BB%E9%87%8F%E7%AE%80%E5%8D%95)%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.yurui.tech/2019/12/28/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/6%E3%80%81WEB-UI%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BFCockpit(%E8%BD%BB%E9%87%8F%E7%AE%80%E5%8D%95)%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2019-12-28T04:49:49.000Z</published>
    <updated>2019-12-28T04:49:49.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在前面我们介绍了管理面板Webmin的安装与使用，这次我们来看Cockpit的安装与使用，Webmin与Cockoit都属于轻量级的管理面板，但是Cockpit的功能较Webmin有了更多的减少，提供了更多的图表可视化功能，对中文的支持也比Webmin要好得多。&lt;/p&gt;
&lt;p&gt;cockpit提供了几乎所有Linux发行版本的安装包，对各个Linux平台支持都很好，这在官方的宣传里可以看到。该软件为开源软件，并在官网提供了详细的开发者文档。&lt;br&gt;
    
    </summary>
    
    
      <category term="家庭NAS、HTPC服务器" scheme="http://www.yurui.tech/categories/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="NAS系统" scheme="http://www.yurui.tech/tags/NAS%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="家庭影音" scheme="http://www.yurui.tech/tags/%E5%AE%B6%E5%BA%AD%E5%BD%B1%E9%9F%B3/"/>
    
      <category term="HTPC服务器" scheme="http://www.yurui.tech/tags/HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="linux管理面板" scheme="http://www.yurui.tech/tags/linux%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF/"/>
    
      <category term="Cockpit" scheme="http://www.yurui.tech/tags/Cockpit/"/>
    
  </entry>
  
  <entry>
    <title>WEB-UI管理面板webmin（轻量级较全面）安装及使用</title>
    <link href="http://www.yurui.tech/2019/12/27/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/5%E3%80%81WEB-UI%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BFwebmin%EF%BC%88%E8%BD%BB%E9%87%8F%E7%BA%A7%E8%BE%83%E5%85%A8%E9%9D%A2%EF%BC%89%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.yurui.tech/2019/12/27/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/5%E3%80%81WEB-UI%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BFwebmin%EF%BC%88%E8%BD%BB%E9%87%8F%E7%BA%A7%E8%BE%83%E5%85%A8%E9%9D%A2%EF%BC%89%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2019-12-27T04:49:49.000Z</published>
    <updated>2019-12-27T04:49:49.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;相信很多人选择黑群晖的原因之一是因为群晖有很好的图形化管理面板，其实Ubuntu，或者说linux也可以很好的图形化管理面板。&lt;/p&gt;
&lt;p&gt;本系列文章将介绍两种轻量级的管理面板&lt;strong&gt;Webmin(功能较全面)&lt;/strong&gt;和&lt;strong&gt;Cockpit(功能简单)&lt;/strong&gt;，对于那些功能全面的重量级面板，再次不做介绍，尽管那些工具开发得很完善，但是在家用nas上使用却显得有些臃肿了。&lt;/p&gt;
&lt;p&gt;就这样，请拥有，并享受。&lt;br&gt;
    
    </summary>
    
    
      <category term="家庭NAS、HTPC服务器" scheme="http://www.yurui.tech/categories/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="NAS系统" scheme="http://www.yurui.tech/tags/NAS%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="家庭影音" scheme="http://www.yurui.tech/tags/%E5%AE%B6%E5%BA%AD%E5%BD%B1%E9%9F%B3/"/>
    
      <category term="HTPC服务器" scheme="http://www.yurui.tech/tags/HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="WEB-UI管理面板" scheme="http://www.yurui.tech/tags/WEB-UI%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF/"/>
    
      <category term="webmin" scheme="http://www.yurui.tech/tags/webmin/"/>
    
      <category term="linux管理面板" scheme="http://www.yurui.tech/tags/linux%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>SSH工具Xshell的安装以及使用</title>
    <link href="http://www.yurui.tech/2019/12/26/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/4%E3%80%81SSH%E5%B7%A5%E5%85%B7Xshell%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.yurui.tech/2019/12/26/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/4%E3%80%81SSH%E5%B7%A5%E5%85%B7Xshell%E7%9A%84%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/</id>
    <published>2019-12-26T04:49:49.000Z</published>
    <updated>2019-12-26T04:49:49.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在原本的计划中并没有准备专门写一篇关于SSH远程连接的教程，但想了想，该专栏文章应该致力于让所有读者都能看懂，即使你是从未使用过Linux操作系统的小白。&lt;/p&gt;
&lt;p&gt;当然，本文仅介绍了XShell的试用，你也可以选择其他软件，这都一样，并不影响你的使用。&lt;/p&gt;
&lt;p&gt;如果你已经有相关的使用经验，那么你可以直接跳过本章，毕竟下面的内容会浪费你宝贵生命中的几分钟。&lt;/p&gt;
&lt;p&gt;就这样，请拥有，并享受。&lt;br&gt;
    
    </summary>
    
    
      <category term="家庭NAS、HTPC服务器" scheme="http://www.yurui.tech/categories/%E5%AE%B6%E5%BA%ADNAS%E3%80%81HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="NAS系统" scheme="http://www.yurui.tech/tags/NAS%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="家庭影音" scheme="http://www.yurui.tech/tags/%E5%AE%B6%E5%BA%AD%E5%BD%B1%E9%9F%B3/"/>
    
      <category term="HTPC服务器" scheme="http://www.yurui.tech/tags/HTPC%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="xshell配置" scheme="http://www.yurui.tech/tags/xshell%E9%85%8D%E7%BD%AE/"/>
    
      <category term="ssh安装及使用" scheme="http://www.yurui.tech/tags/ssh%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    
      <category term="xshell安装" scheme="http://www.yurui.tech/tags/xshell%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
